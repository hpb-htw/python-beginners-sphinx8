# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html
from sys import stderr

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = u'Introduction to Programming with Python'
copyright = u'2012â€“2025, OpenTechSchool and contributors'
author = 'OpenTechSchool and contributors'

# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = []

templates_path = ['_templates']
exclude_patterns = []

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
# https://www.sphinx-doc.org/en/master/usage/advanced/intl.html
language = 'en'
locale_dirs = ["locale/"]
gettext_compact = False
gettext_uuid = True

# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

#html_theme = 'alabaster'
html_theme = 'sphinx_nefertiti'
html_static_path = ['_static']
html_style = ["custom.css"]
html_theme_options = {
    "pygments_light_style": "default",
    "pygments_dark_style": "monokai",
}

# own directive
from docutils.parsers import rst
from docutils import nodes
from email.utils import parseaddr
import glob
import subprocess
import unicodedata

PO_PATH = 'source/locale/%s/LC_MESSAGES/*.po'

class Contributors(rst.Directive):
    _GIT_COMMAND = "git log --format=%aN"
    def run(self):
        authors = self.collect_authors_from_git()
        translators = self.collect_translators_from_po()
        contributors = authors.union(translators)
        bullet_list = nodes.bullet_list()
        for contributor in sorted(contributors, key=str.lower):
            bullet_list.append(nodes.list_item(contributor,
                                               nodes.paragraph(contributor, contributor)))
        return [bullet_list]

    def collect_authors_from_git(self) -> set:
        """
        :return: set of authors or empty set
        """
        try:
            authors = set(subprocess.check_output(self._GIT_COMMAND.split())
                          .splitlines())
            return set(map(lambda _a: unicodedata.normalize('NFC', _a.decode('utf-8')), authors))
        except (AttributeError, OSError, subprocess.CalledProcessError) as e:
            print("Project is not in a git repo", file=stderr)
            return set()

    def collect_translators_from_po(self) -> set:
        lang = self.state.document.settings.env.config.language
        translators = set()
        for fname in glob.iglob(PO_PATH % lang):
            with open(fname) as po:
                lines = iter(po)
                for line in lines:
                    if line == "# Translators:\n":
                        break
                for line in lines:
                    if not line.startswith("# "):
                        break
                    address = line[2:].split(',')[0].strip()
                    translator = parseaddr(address)[0]
                    if len(translator) > 0:
                        translators.add(translator)
        return translators



def setup(app):
    app.add_directive('contributors', Contributors)
