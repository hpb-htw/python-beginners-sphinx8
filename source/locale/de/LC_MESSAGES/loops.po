# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012â€“2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to
# Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-19 11:05+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/loops.rst:2 2146bc57645e4cd6acb518c20d93d27a
msgid "Loops"
msgstr ""

#: ../../source/loops.rst:5 fd95dffc4e9d4a65a790bd630507e483
msgid "Introduction"
msgstr ""

#: ../../source/loops.rst:7 5a9a711072924d738c558f84f01d8219
msgid ""
"Something you might have noticed: our programs often feature repetition. "
"Python has a powerful concept it makes use of called looping (jargon: "
"*iteration*), which we can use to cut out our reptitive code! For now, "
"**try this easy example**::"
msgstr ""

#: ../../source/loops.rst:15 9f3101b7b09d4194a15615cec7117974
msgid ""
"This is incredibly helpful if we want to do something multiple times --- "
"say, drawing the individual border lines of a shape --- but only want to "
"write that action once. Here's another version of a loop::"
msgstr ""

#: ../../source/loops.rst:22 438900eb1c3246c0b7e120f84a5b1fe0
msgid ""
"Notice how we write only one line of code using ``i``, but it takes on 10"
" different values?"
msgstr ""

#: ../../source/loops.rst:25 ce2cdcc5957845e7a43d6c4000e9008b
msgid ""
"The :samp:`range(n)` function can be considered a shorthand for ``0, 1, "
"2, ..., n-1``. If you want to know more about it, you can use the help in"
" the Python shell by typing ``help(range)``. Use the :kbd:`q` key to exit"
" the help again."
msgstr ""

#: ../../source/loops.rst:30 0f8268e5fadf46baa4e055b19a995c74
msgid "You can also loop over elements of your choice::"
msgstr ""

#: ../../source/loops.rst:39 53009ca3f3f14dbb9003a2bc3c571abc
msgid ""
"Write this example out and run it with python, to check it works how you "
"might expect."
msgstr ""

#: ../../source/loops.rst:44 800aeb398fd444a7b99fe140a34bb1ce
msgid ""
"Notice how above, the lines of code that are *looped*, are the ones that "
"are *indented*. This is an important concept in Python - that's how it "
"knows which lines should be used in the ``for`` loop, and which come "
"after, as part of the rest of your program. Use four spaces (hitting tab)"
" to indent your code."
msgstr ""

#: ../../source/loops.rst:50 169c9693b99549e4851c9d203698d490
msgid ""
"Sometimes you want to repeat some code a number of times, but don't care "
"about the value of the ``i`` variable; so it can be good practice to "
"replace it with ``_`` instead. This signifies that we don't care about "
"its value, or don't wish to use it. Here's a simple example::"
msgstr ""

#: ../../source/loops.rst:58 32dab2145d3141f1b9b9bdf1fdddf588
msgid ""
"You may or may not be wondering about the variable ``i`` - why is it used"
" all the time above? Well, it simply stands for \"index\" and is one of "
"the most common variable names ever found in code. But if you are looping"
" over something other than just numbers, be sure to name it something "
"better! For instance::"
msgstr ""

#: ../../source/loops.rst:66 81777f6c49e540929f330c715c2973a0
msgid ""
"This is immediately clearer to understand than if we had used ``i`` "
"instead of ``drink``."
msgstr ""

#: ../../source/loops.rst:70 2ae2b836df3b4dc59a7091f0987b04e9
msgid "Drawing a dashed line"
msgstr ""

#: ../../source/loops.rst:73 ../../source/loops.rst:129
#: 5a5fef4688a14036a2c7c7fcfb05f7c3 d8ee3cfc593a43a3b97a07f22443ed56
msgid "Exercise"
msgstr ""

#: ../../source/loops.rst:75 3ba7655ad4f740c794164f27ace39b8c
msgid ""
"Draw a dashed line.  You can move the turtle without the turtle drawing "
"its movement by using the ``turtle.penup()`` function; to tell it to draw"
" again, use ``turtle.pendown()``."
msgstr ""

#: ../../source/loops.rst:84 ../../source/loops.rst:138
#: a9003575b2a64e2f89b1e0222e093dfc eee6563f8f58439793f857ad5e8e4d98
msgid "Solution"
msgstr ""

#: ../../source/loops.rst:95 ../../source/loops.rst:147
#: 0832c1b2d9b44cf8b7d75cc09caf5538 3c1fae6e81244a2cba946237dce8f155
msgid "Bonus"
msgstr ""

#: ../../source/loops.rst:97 df0ea71d8797424aaeab1ec3c8407e74
msgid "Can you make the dashes become larger as the line progresses?"
msgstr ""

#: ../../source/loops.rst:103 bedbdd7629de4e08839e85b1ac854a87
msgid "Feeling lost?  Inspect ``i`` at every run of the loop::"
msgstr ""

#: ../../source/loops.rst:109 080fab4604cd43128286f5c4850ae131
msgid ""
"Can you utilize ``i`` --- commonly called the **index** variable or loop "
"variable --- to get increasing step sizes?"
msgstr ""

#: ../../source/loops.rst:113 a4ea1d0ac2174b6781b39afb96077870
msgid "Comments"
msgstr ""

#: ../../source/loops.rst:115 6f25446174a64d44b3165ebe7cd8c1f5
msgid ""
"In the example above, the line that starts with a ``#`` is called a "
"comment. In Python, anything that goes on a line after ``#`` is ignored "
"by the computer. Use comments to explain what your program does, without "
"changing the behaviour for the computer. They can also be used to easily "
"and temporarily disable, or \"comment out\" some lines of code."
msgstr ""

#: ../../source/loops.rst:121 51883fffe3204f6b84f0eba3d7b2428e
msgid "Comments can also go at the end of a line, like this::"
msgstr ""

#: ../../source/loops.rst:126 2a3ece3384bc466ab73c6c0c96f7e53f
msgid "More Efficient Squares"
msgstr ""

#: ../../source/loops.rst:131 8ae8467c2a384b28aa85ad5d32f93e78
msgid ""
"The squares we were drawing at the start of this tutorial had a lot of "
"repeated lines of code. Can you write out a square drawing program in "
"fewer lines by utilizing loops?"
msgstr ""

#: ../../source/loops.rst:149 0df1154337124477b387604d2ce4e936
msgid ""
"Try *nesting* loops, by putting one right under (*inside*) the other, "
"with some drawing code that's inside both. Here's what it can look like::"
msgstr ""

#: ../../source/loops.rst:160 6afc2d309c574326a8edcfc44e44a5af
msgid ""
"Replace the ``...``'s with your own code, and see if you can come up with"
" something funny or interesting! :sup:`Mistakes are encouraged!`"
msgstr ""

