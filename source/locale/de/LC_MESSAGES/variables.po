# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012â€“2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to
# Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-19 11:05+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/variables.rst:2 26a688f7dc0b4b3b9e61cf575ee5379f
msgid "Variables"
msgstr ""

#: ../../source/variables.rst:5 958beff40282447dbfda16bdbed2d65a
msgid "Introduction"
msgstr ""

#: ../../source/variables.rst:7 cf37bd0d96ba4bc1b391cb6ff20df49f
msgid ""
"Whew. Experimenting with the angles requires you to change three "
"different places in the code each time. Imagine you'd want to experiment "
"with all of the square sizes, let alone with rectangles! We can do better"
" than that."
msgstr ""

#: ../../source/variables.rst:11 420f63a392754a4db92334aa5fe5d619
msgid ""
"This is where **variables** come into play: You can tell Python that from"
" now on, whenever you refer to a variable, you actually mean something "
"else. That concept might be familiar from symbolic maths, where you would"
" write: *Let x be 5.* Then *x \\* 2* will obviously be *10*."
msgstr ""

#: ../../source/variables.rst:16 2dfb16652bb54153b818255971a3da20
msgid "In Python syntax, that very statement translates to::"
msgstr ""

#: ../../source/variables.rst:20 eb61902a700946cd9dc08d179d719407
msgid ""
"After that statement, if you do ``print(x)``, it will actually output its"
" value --- 5.  Well, can use that for your turtle too::"
msgstr ""

#: ../../source/variables.rst:25 ae27ac9fae1a4d8aadf8cada44193a76
msgid ""
"Variables can store all sorts of things, not just numbers. A typical "
"other thing you want to have stored often is a **string** - a line of "
"text. Strings are indicated with a starting and a leading ``\"`` (double "
"quote). You'll learn about this and other types, as those are called in "
"Python, and what you can do with them later on."
msgstr ""

#: ../../source/variables.rst:31 6a2fbe08ca79417ca5ad968ded343757
msgid "You can even use a variable to give the turtle a name::"
msgstr ""

#: ../../source/variables.rst:35 abab599633bf400bb031347ed90af963
msgid ""
"Now every time you type ``timmy`` it knows you mean ``turtle``. You can "
"still continue to use ``turtle`` as well::"
msgstr ""

#: ../../source/variables.rst:43 1577cd79c0d543bb80dd4ac11b66a5d9
msgid "A variable called angle"
msgstr ""

#: ../../source/variables.rst:46 ../../source/variables.rst:85
#: 388b4a3f4f824f638837c9b7830491c2 edc4fb04b2f940e2b2cb4ad6f965db86
msgid "Exercise"
msgstr ""

#: ../../source/variables.rst:48 e56a21d3521c4619888284edd845a703
msgid ""
"If we have a variable called ``angle``, how could we use that to "
"experiment much faster with our tilted squares program?"
msgstr ""

#: ../../source/variables.rst:54 26fc6d7c6f6b499cbf4629146ca88362
msgid "Solution"
msgstr ""

#: ../../source/variables.rst:74 c7b702aa0747481eac2856dabaf459d3
msgid "... and so on"
msgstr ""

#: ../../source/variables.rst:77 8a2b30995bd844efaec10ee136fe2f93
msgid "Bonus"
msgstr ""

#: ../../source/variables.rst:79 20cb7f82ea2f4593a8bad53d12ea349b
msgid "Can you apply that principle to the size of the squares, too?"
msgstr ""

#: ../../source/variables.rst:82 83d75887a41640c5bb8a3270e67cab1f
msgid "The house of santa claus"
msgstr ""

#: ../../source/variables.rst:87 dda10185e4a54049a1a46e7e91442d79
msgid "Draw a house."
msgstr ""

#: ../../source/variables.rst:91 4ca34da9d5e048e9804d183091b2f400
msgid ""
"You can calculate the length of the diagonal line with the Pythagorean "
"theorem. That value is a good candidate to store in a variable. To "
"calculate the square root of a number in Python, you'll need to import "
"the *math* module and use the ``math.sqrt()`` function. The square of a "
"number is calculated with the ``**`` operator::"
msgstr ""

