# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012â€“2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to
# Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-19 11:05+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/functions.rst:2 f00f1ba372f044d6ab7b2cdb2a88edc4
msgid "User-defined functions"
msgstr ""

#: ../../source/functions.rst:5 79e8a9d699f94094832f81f01abf010a
msgid "Introduction"
msgstr ""

#: ../../source/functions.rst:7 ba822304930242409faf5074dca9be51
msgid ""
"Programmers can deal with some pretty complex and abstract problems, but "
"one sign of a good programmer is that they're lazy. They only like to "
"deal with one thing at a time. So you need a way to break up problems "
"into smaller, discrete pieces, which lets you focus on just the piece you"
" want to."
msgstr ""

#: ../../source/functions.rst:12 3493271b24944a43a3840586949dfd3d
msgid ""
"Functions are one way to do this abstraction in Python. Let's take "
"``turtle.reset()`` for example. ``reset`` is a function we call on our "
"``turtle``, and it is actually an abstraction for a number of steps, "
"namely:"
msgstr ""

#: ../../source/functions.rst:16 0f0f6bad39654df8a7d462dc336d2e59
msgid "Erase the drawing board."
msgstr ""

#: ../../source/functions.rst:17 89bf354bd1c949a5b7fff0df3698bed7
msgid "Set the width and color back to default."
msgstr ""

#: ../../source/functions.rst:18 00d0e83e955d41d89a14f3be58ed9bef
msgid "Move the turtle back to its initial position."
msgstr ""

#: ../../source/functions.rst:20 d03c2cb06f3d4f13949a42d1897a9656
msgid ""
"But because all the code is contained in the function, we don't have to "
"worry about these details. We can simply *call* this function, and know "
"it will do what it says for us."
msgstr ""

#: ../../source/functions.rst:23 f112d95b3325444db19f18a26447d52d
msgid "So - how to write your own?"
msgstr ""

#: ../../source/functions.rst:25 5c45d77c507741cab7c742c73d1a4b44
msgid "A function can be defined with the ``def`` keyword in Python::"
msgstr ""

#: ../../source/functions.rst:31 ddadcd0b4c96452799b1ad59644661f4
msgid ""
"This function we defined is called ``line_without_moving`` and it is an "
"abstraction for two turtle steps - a move forward and a move backward."
msgstr ""

#: ../../source/functions.rst:35 219eeed10220427c816570b152ee9026
msgid ""
"To use it (or as it is usually called, \"to call it\"), write its name "
"followed by parentheses::"
msgstr ""

#: ../../source/functions.rst:46 aa0547571a0944248c11ea8595b3198f
msgid "We could write more functions to remove some of the repetition::"
msgstr ""

#: ../../source/functions.rst:57 7729f0bdc2964308bf114ebe73e995bf
msgid ""
"Python uses *indenting with whitespace* to identify blocks of code that "
"belong together. In Python a block (like the function definitions shown "
"above) is introduced with a colon at the end of the line and subsequent "
"commands are indented --- usually 4 spaces further in. The block ends "
"with the first line that isn't indented."
msgstr ""

#: ../../source/functions.rst:63 73d2c06273cc49f99d0e18853c75c59b
#, python-brace-format
msgid ""
"This is different to many other programming languages, which use special "
"characters (like curly braces ``{}``) to group blocks of code together."
msgstr ""

#: ../../source/functions.rst:67 b4c740687a9a45f6b94ce7821b54d8d2
msgid ""
"Never use tab characters to indent your blocks, only spaces. You can -- "
"and should -- configure your editor to put 4 spaces when you press the "
"tab key. The problem with using tab characters is that other python "
"programmers use spaces, and if both are used in the same file python will"
" read it wrong (in the best place, it will complain, and in the worst "
"case, weird, hard to debug bugs will happen)."
msgstr ""

#: ../../source/functions.rst:76 1b63343c91324173826cd5d1b7084cb1
msgid "A function for a square"
msgstr ""

#: ../../source/functions.rst:79 ../../source/functions.rst:120
#: 48acb190e8ce4118889765ce4253f59a ee5285fdb8394058a0bd786eb36f0d46
msgid "Exercise"
msgstr ""

#: ../../source/functions.rst:81 4edb0b595a024caea78d170da86cf455
msgid ""
"Write a function that draws a square. Could you use this function to "
"improve the tilted squares program? If you change the program to use a "
"function, is it easier to experiment with?"
msgstr ""

#: ../../source/functions.rst:88 ../../source/functions.rst:142
#: 5997e7552800456b8526230af8c48103 dd6a3ef0a0354c9691e6fa7c64a1ef9b
msgid "Solution"
msgstr ""

#: ../../source/functions.rst:117 8336f1442df04745be9e0238c5b9b986
msgid "A function for a hexagon"
msgstr ""

#: ../../source/functions.rst:122 ee298487754648839d2d9af4da200718
msgid "Write a function that draws a hexagon."
msgstr ""

#: ../../source/functions.rst:126 e71c59ab829d4a5cb314a30e74da0191
msgid ""
"Now combine that function into a honeycomb. Just make it with a single "
"layer like this:"
msgstr ""

#: ../../source/functions.rst:130 d1892d12809f40cb923e62e1c24cfc34
msgid "Give it a good go!"
msgstr ""

#: ../../source/functions.rst:134 f393b2b309884d9098582d0f83921626
msgid ""
"Make sure your hexagon function returns your turtle to exactly the same "
"position and angle it was before it was asked to draw the hexagon. This "
"makes it easier to reason about."
msgstr ""

#: ../../source/functions.rst:156 fb476ae46e864244a200a61455c33b97
msgid ""
"You could also put the ``turtle.forward(100); turtle.right(60)`` portion "
"in the function, but you better not call it ``hexagon`` in that case.  "
"That's misleading because it actually draws a hexagon and then advances "
"to a position where another hexagon would make sense in order to draw a "
"honeycomb.  If you ever wanted to reuse your hexagon function outside of "
"honeycombs, that would be confusing."
msgstr ""

