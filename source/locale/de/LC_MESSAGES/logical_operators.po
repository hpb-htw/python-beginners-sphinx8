# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012â€“2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to
# Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-19 11:05+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/logical_operators.rst:2 55d74058222f4529be5b1d61457deeb3
msgid "Logical operators"
msgstr ""

#: ../../source/logical_operators.rst:5 0a884f82d15e41d19a6e32b9e0d97cea
msgid "Introduction"
msgstr ""

#: ../../source/logical_operators.rst:7 f0de9f17a32e46d6811c0d70a4ef14ec
msgid ""
"Conditionals are a nice way to make decisions by asking if something "
"equals *True* or not. But often one condition is not enough. We may want "
"to take the opposite of our result. Or for instance if we want to make a "
"decision upon ``turtle.xcor()`` and ``turtle.ycor()`` we have to combine "
"them. This can be done with logical operators."
msgstr ""

#: ../../source/logical_operators.rst:14 e7a6e6f683c34e1fa8ffe45b74e56c07
msgid "Negation of a statement"
msgstr ""

#: ../../source/logical_operators.rst:16 8d71e782e9e843498d05c6b7fad1663a
msgid ""
"If we want something to be *False* we can use ``not``. It is a logical "
"operator::"
msgstr ""

#: ../../source/logical_operators.rst:26 ../../source/logical_operators.rst:66
#: 70cea875ec6b4b79a55194e61e999a69 c03a3679c2e6439c8538e57984452665
msgid "Exercise"
msgstr ""

#: ../../source/logical_operators.rst:28 85152b5de717413d9575f4c8bf693835
msgid ""
"The turtle gives us a useful function to know if it is drawing or not: "
"``turtle.isdown()``.  This function returns *True* if the turtle is "
"drawing. As we have seen earlier, the function ``turtle.penup()`` and "
"``turtle.pendown()`` toggle between drawing while moving, or just moving "
"without a trace."
msgstr ""

#: ../../source/logical_operators.rst:33 0f01545c3bbc43e2be54653bc1aecf7c
msgid "Can we write a function that only goes forward if the pen is up?"
msgstr ""

#: ../../source/logical_operators.rst:38 ../../source/logical_operators.rst:75
#: 188c31f0220e4dfc9fe0e6d361ac2d6c eb6d0bd671b644d1848c85921d732123
msgid "Solution"
msgstr ""

#: ../../source/logical_operators.rst:48 4f1a7d707e6b4adca182739a91372d4c
msgid "This and that or something else"
msgstr ""

#: ../../source/logical_operators.rst:50 1324f0fcc79140a8b214857f066a24e8
msgid ""
"Two easy to understand operators are ``and`` and ``or``. They do exactly "
"what they sound like:::"
msgstr ""

#: ../../source/logical_operators.rst:62 91286c31dd6f45a8ad345d52bcc9afac
msgid ""
"You are not restricted to one logical operator. You can combine as may as"
" you want."
msgstr ""

#: ../../source/logical_operators.rst:68 26789c5cc5a44ddb8e10e4da1884c1a1
msgid ""
"Earlier we put the turtle in a circular prison. This time let's make it a"
" box. If the turtle goes more than 100 in the X *or* Y axis then we turn "
"the turtle back around to the center."
msgstr ""

