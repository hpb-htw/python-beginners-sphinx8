# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012â€“2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to
# Programming with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-05-19 11:05+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/conditionals.rst:2 866db15109bc4fb9843d2ab47366bc25
msgid "Conditional statements"
msgstr ""

#: ../../source/conditionals.rst:5 63d304a28194443e88524a10bbeb7d02
msgid "Introduction"
msgstr ""

#: ../../source/conditionals.rst:7 2d4358e4f98b46a3b09be9d4a2b77f77
msgid ""
"So far we have accomplished predefined tasks, but in all honesty we were "
"accomplishing no better than old-time music boxes following one set of "
"instructions to the end. What makes programming so much more powerful are"
" conditional statements. This is the ability to *test* a variable against"
" a value and act in one way if the condition is met by the variable or "
"another way if not. They are also commonly called by programmers *if "
"statements*."
msgstr ""

#: ../../source/conditionals.rst:15 5ab2b83800c44b13af975f1271770df3
msgid ""
"To know if a condition is *True* of *False*, we need a new type of data: "
"the booleans. They allow logical operations. A logic statement or "
"operation can be evaluated to be *True* or *False*. Our conditional "
"statement can then be understood like this:"
msgstr ""

#: ../../source/conditionals.rst:20 fd2b2e64f5b14fc39bb24d60665f92ee
msgid "**if** *(a condition evaluates to True)*:"
msgstr ""

#: ../../source/conditionals.rst:21 10505f5f665b4daabcb65739abb971fc
msgid "*then do these things only for 'True'*"
msgstr ""

#: ../../source/conditionals.rst:22 c886babfd7e9466c91dc861142edf15f
msgid "**else**:"
msgstr ""

#: ../../source/conditionals.rst:23 9b30706cbdb24b399330ed462af6edf7
msgid "*otherwise do these things only for 'False'*."
msgstr ""

#: ../../source/conditionals.rst:25 e1359944521c425d95eaf8ad958378c2
msgid ""
"The condition can be anything that evaluates as *True* or *False*. "
"Comparisons always return *True* or *False*, for example ``==`` (equal "
"to), ``>`` (greater than), ``<`` (less than.)"
msgstr ""

#: ../../source/conditionals.rst:29 1b993202c6384733b82c5a7ecb381852
msgid ""
"The **else** part is optional. If you leave it off, nothing will happen "
"if the conditional evaluates to 'False'."
msgstr ""

#: ../../source/conditionals.rst:34 ea193b359acf422d8564d259a346f335
msgid "Examples"
msgstr ""

#: ../../source/conditionals.rst:36 b80ba0e4b15e4bb39747ae8e91e8d943
msgid ""
"Here are some examples. You may want to read them over line-by-line and "
"see what you think they do, or run them to be certain::"
msgstr ""

#: ../../source/conditionals.rst:54 9e9ec61bdb424faf85e440d40dbe1063
msgid "Giving Directions"
msgstr ""

#: ../../source/conditionals.rst:56 bbca099892144f5fbb804cc7341421e1
msgid ""
"Python turtles can be very good at following instructions. Let's use the "
"``input()`` function to ask the user for a direction to move the turtle. "
"To keep things easy we will only accept two instructions: \"left\" and "
"\"right\"."
msgstr ""

#: ../../source/conditionals.rst:63 c5fb8d8d0c444d558dbc80e310c765d8
msgid "Using Python 2? The ``input()`` function is called ``raw_input()``."
msgstr ""

#: ../../source/conditionals.rst:65 d524690887e54c5fa417eec2701a7fa1
msgid "It's much easier to define this as a function, like so::"
msgstr ""

#: ../../source/conditionals.rst:76 37151b9d4f76410db84f270380d77aeb
msgid ""
"Now whenever you use ``move()`` you are prompted to choose ``left`` or "
"``right``."
msgstr ""

#: ../../source/conditionals.rst:81 2ee92a3f7d764baaa99e9312a4efae0c
msgid "\"data munging\""
msgstr ""

#: ../../source/conditionals.rst:83 53e52e5345af400cb7e54c8a8bea8d18
msgid ""
"In this program, the turtle will only respond to exactly ``left`` or "
"``right`` with no variation. Though ``Left`` or ``LEFT`` might seem the "
"same as ``left`` to a human, that isn't the case when programming. Python"
" has a few utility methods to help with that. A string has the methods "
"``.strip()``, which removes whitespace and ``.lower()`` which makes "
"everything lower-case."
msgstr ""

#: ../../source/conditionals.rst:90 584e6bd30d864d50a8dfae035d3e3987
msgid ""
"Here are some examples to print out the effects of ``.strip()`` and "
"``.lower()``::"
msgstr ""

#: ../../source/conditionals.rst:99 97c0ca0ca1c449e49bffd9470f6bd657
msgid ""
"Try adding ``direction = direction.strip().lower()`` to the ``move()`` "
"function, to see the effect. We often call this kind of code \"data "
"munging\", and it is very common."
msgstr ""

#: ../../source/conditionals.rst:103 c3ebf2fa25e04f1bbe2bcd68abeb37a8
msgid ""
"Can you add some extra input choices to make the turtle draw other "
"things? How about ``hexagon``?"
msgstr ""

